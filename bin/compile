#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>

# fail fast
set -e
#set -x
unset GIT_DIR

function message {
  echo "$1"
  sync
}

# https://devcenter.heroku.com/articles/buildpack-api
export_env_dir() {
  env_dir=$1
  message "-----> ENV_DIR is $env_dir"
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      message "-----> ENV_DIR contains file $e"
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}

export_env_dir "$3"

mkdir -p "$1" "$2"
BUILD_DIR=$(cd "$1/" && pwd)
CACHE_DIR=$(cd "$2/" && pwd)

# this variable is used by pub to determine the package install location
PUB_CACHE="/app/pub-cache"
export PUB_CACHE
mkdir -p $PUB_CACHE

MACHINE=`uname -a`
message "-----> Welcome, this machine is: $MACHINE"

if [ -z "$DART_SDK_URL" ]; then
    message "ERROR: you must specify DART_SDK_URL to a Dart SDK for Linux. See README for this buildpack."
    exit 1
fi

# NPM stuff
cat_npm_debug_log() {
  test -f $BUILD_DIR/npm-debug.log && cat $BUILD_DIR/npm-debug.log
}

# Output npm debug info on error
trap cat_npm_debug_log ERR

# Resolve node version using semver.io
node_version="6.3.1"

# Download node from Heroku's S3 mirror of nodejs.org/dist
echo "-----> Downloading and installing node ${node_version} ..."
node_url="http://s3pository.heroku.com/node/v$node_version/node-v$node_version-linux-x64.tar.gz"
curl $node_url -s -o - | tar xzf - -C $BUILD_DIR

# Move node (and npm) into ./vendor and make them executable
mkdir -p $BUILD_DIR/vendor
mv $BUILD_DIR/node-v$node_version-linux-x64 $BUILD_DIR/vendor/node
chmod +x $BUILD_DIR/vendor/node/bin/*
PATH=$PATH:$BUILD_DIR/vendor/node/bin

# Clean any npm cache hanging about
npm update -g
npm cache clean

for filename in `find . -name package.json`; do
    pub_dir=`dirname $filename`
    message "*** Found package.json in $BUILD_DIR/$pub_dir"
    cd $BUILD_DIR/$pub_dir
    npm install
done

# NPM stuff end

cd $BUILD_DIR

message "-----> Installing Dart VM via URL $DART_SDK_URL"

cd $CACHE_DIR

case "${DART_SDK_URL: -3}" in
  tar)
    message "SDK: tarball detected"
    curl -L -k $DART_SDK_URL -o - | tar xzf -
    ;;
  zip)
    message "SDK: zip detected"
    curl -L -k $DART_SDK_URL > dart-sdk.zip ; unzip -o -q dart-sdk.zip
    ;;
  deb)
    message "SDK: deb detected"
    # TODO
    message "Please use the .zip Dart SDK"
    ;;
  *)
    message "Invalid Dart SDK URL" #kill after this or keep going in case SDK is there from last push?
    ;;
esac

message "-----> Copy Dart binaries to app root"
cp -r $CACHE_DIR/dart-sdk $BUILD_DIR

# we need to copy the sdk into the /app folder in order for the sdk libraries
# to be referenced correctly
# reason being that the /tmp folder will be deleted after build, and /app
# resembles the location of the ready built app
cp -r $CACHE_DIR/dart-sdk /app

DART_BIN=`ls -l /app/dart-sdk/bin/dart`
message "-----> Dart cmd found at $DART_BIN"

CAN_DART_RUN=`/app/dart-sdk/bin/dart --version`
message "-----> Dart reports version: $CAN_DART_RUN"

cd $BUILD_DIR

for filename in `find . -name pubspec.yaml | grep -v dart-sdk | grep -v pub-cache`; do
    pub_dir=`dirname $filename`
    message "*** Found pubspec.yaml in $BUILD_DIR/$pub_dir"
    cd $BUILD_DIR/$pub_dir

    message "*** Running pub get"

    /app/dart-sdk/bin/pub --version

    #start pub from the /app folder to have correct symlink paths
    /app/dart-sdk/bin/pub get

    message "*** Running pub build"

    if [[ -d "web" ]]
    then
        message 'Building with "pub build"'
        /app/dart-sdk/bin/pub build
    fi

done

# I think heroku deletes all the contents of /app and replaces it with
# whatever is in $BUILD_DIR, so copy over the pub-cache. Why not put it in
# $BUILD_DIR in the first place? because we need symlinks setup correctly.
cp -R $PUB_CACHE $BUILD_DIR/pub-cache
message `ls -l $BUILD_DIR/pub-cache`